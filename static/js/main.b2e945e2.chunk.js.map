{"version":3,"sources":["reportWebVitals.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","constants.js","components/Hader.jsx","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","resp","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8NAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCOCQ,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,mDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,gCACE,6BAAKF,IACL,4BAAIC,WCaGK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OADAC,QAAQC,IAAI,YAEV,8BACGF,EAAOG,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,EAAD,CAEEV,GAAIK,EAAOK,GAAGV,GACdF,KAAMO,EAAOK,GAAGZ,KAChBC,MAAOM,EAAOK,GAAGX,OAHZW,SCMFC,EAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEnB,OADAN,QAAQC,IAAI,aAEV,qBAAKN,UAAU,MAAf,SACE,uBACEA,UAAU,oCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCMHI,EAdA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGJ,EAAMK,Y,oCCYEC,E,kDApBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,0DAGFG,KAAKX,MAAMK,a,GAjBKQ,IAAMC,WCFpBC,EAAsB,sBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCYtBC,E,4JATb,WACE,OACE,qCACE,oBAAInC,UAAU,KAAd,yBADF,W,GAPe8B,aCqENM,eA5DS,SAACb,GACvB,MAAO,CACLc,YAAad,EAAMe,aAAaD,YAChCjC,OAAQmB,EAAMgB,cAAcnC,OAC5BoC,UAAWjB,EAAMgB,cAAcC,UAC/Bf,MAAOF,EAAMgB,cAAcd,UAIJ,SAACgB,GAC1B,MAAO,CACLC,eAAgB,SAACC,GAAD,OAAWF,GCfAG,EDewBD,EAAME,OAAOC,MCd3D,CACLlC,KAAMmB,EACNgB,QAASH,KAHiB,IAACA,GDgB3BI,gBAAiB,kBAAMP,GCTQ,SAACA,GAClCA,EAAS,CAAE7B,KAAMoB,IACjBiB,MAAM,8CACH3D,MAAK,SAAC4D,GAAD,OAAUA,EAAKC,UACpB7D,MAAK,SAAC8D,GAAD,OAAUX,EAAS,CAAE7B,KAAMqB,EAAwBc,QAASK,OACjEC,OAAM,SAAC5B,GAAD,OACLgB,EAAS,CAAE7B,KAAMsB,EAAuBa,QAAStB,cDmDxCW,EA5CH,SAAC,GAMN,IALLC,EAKI,EALJA,YACAjC,EAII,EAJJA,OACAoC,EAGI,EAHJA,UACAE,EAEI,EAFJA,eACAM,EACI,EADJA,gBAgBAM,qBAAU,WACRN,MACC,CAACA,IAEJ,IAAMO,EAAiBnD,EAAOoD,QAAO,SAACC,GACpC,OAAOA,EAAM5D,KAAK6D,cAAcC,SAAStB,EAAYqB,kBAGvD,OAAOlB,EACL,2CAEA,sBAAKxC,UAAU,KAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWW,aAAc+B,IACzB,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUtC,OAAQmD,cEzDtBK,G,MAAqB,CACzBvB,YAAa,KAYTwB,EAAqB,CACzBrB,WAAW,EACXpC,OAAQ,GACRqB,MAAO,ICXHqC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT/E,MAAK,SAACoF,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrD,QACfgD,UAAUC,cAAcO,YAI1B1E,QAAQC,IACN,+GAKEgE,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBrE,QAAQC,IAAI,sCAGRgE,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BrB,OAAM,SAAC5B,GACNpB,QAAQoB,MAAM,4CAA6CA,MCjFlDyD,yBAAf,IAEMC,EAAcC,YAAgB,CAAE9C,aFJV,WAA8C,IAA7Cf,EAA4C,uDAApCqC,EAAoByB,EAAgB,uDAAP,GAChE,OAAQA,EAAOzE,MACb,KAAKmB,EACH,OAAOuD,OAAOC,OAAO,GAAIhE,EAAO,CAAEc,YAAagD,EAAOtC,UACxD,QACE,OAAOxB,IEDuCgB,cFWvB,WAA8C,IAA7ChB,EAA4C,uDAApCsC,EAAoBwB,EAAgB,uDAAP,GACjE,OAAQA,EAAOzE,MACb,KAAKoB,EACH,OAAOsD,OAAOC,OAAO,GAAIhE,EAAO,CAAEiB,WAAW,IAC/C,KAAKP,EACH,OAAOqD,OAAOC,OAAO,GAAIhE,EAAO,CAC9BnB,OAAQiF,EAAOtC,QACfP,WAAW,IAEf,KAAKN,EACH,OAAOoD,OAAOC,OAAO,GAAIhE,EAAO,CAC9BE,MAAO4D,EAAOtC,QACdP,WAAW,IAEf,QACE,OAAOjB,MExBPiE,EAAQC,YAAYN,EAAaO,YAAgBC,MAEvDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1B7G,IDXO,SAAkBmF,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,yBAAwBlC,OAAOC,SAASkC,MACpDC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM6B,yBAAN,sBAEPpC,IAgEV,SAAiCO,EAAOC,GAEtCrB,MAAMoB,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5BhH,MAAK,SAACiH,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMtH,MAAK,SAACoF,GAClCA,EAAamC,aAAavH,MAAK,WAC7B0E,OAAOC,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1BjB,OAAM,WACLhD,QAAQC,IAAI,oEAtFVyG,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMtH,MAAK,WACjCe,QAAQC,IACN,+GAMJ8D,EAAgBC,EAAOC,OChB/BE,K","file":"static/js/main.b2e945e2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log('CardList');\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  console.log('SearchBox');\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue \"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        border: '3px solid black',\r\n        height: '600px',\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return false;\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 className=\"f1\">RoboFriends</h1>;\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport { requestRobots, setSearchField } from '../actions';\nimport Header from '../components/Hader';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nconst App = ({\n  searchField,\n  robots,\n  isPending,\n  onSearchChange,\n  onRequestRobots,\n}) => {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     robots: [],\n  //     searchField: '',\n  //   };\n  // }\n\n  // componentDidMount() {\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //     .then((resp) => resp.json())\n  //     .then((users) => this.setState({ robots: users }));\n  // }\n\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return isPending ? (\n    <h1>Loading..</h1>\n  ) : (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n  };\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((resp) => resp.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorkerRegistration';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n"],"sourceRoot":""}